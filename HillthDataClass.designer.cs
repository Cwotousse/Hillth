#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.42000
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace premierTest
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Hillth")]
	public partial class HillthDataClassDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Définitions de méthodes d'extensibilité
    partial void OnCreated();
    partial void InsertHopital(Hopital instance);
    partial void UpdateHopital(Hopital instance);
    partial void DeleteHopital(Hopital instance);
    partial void InsertSpecialisation(Specialisation instance);
    partial void UpdateSpecialisation(Specialisation instance);
    partial void DeleteSpecialisation(Specialisation instance);
    partial void InsertMutuelle(Mutuelle instance);
    partial void UpdateMutuelle(Mutuelle instance);
    partial void DeleteMutuelle(Mutuelle instance);
    partial void InsertUtilisateurs(Utilisateurs instance);
    partial void UpdateUtilisateurs(Utilisateurs instance);
    partial void DeleteUtilisateurs(Utilisateurs instance);
    partial void InsertFichePatient(FichePatient instance);
    partial void UpdateFichePatient(FichePatient instance);
    partial void DeleteFichePatient(FichePatient instance);
    partial void InsertHistoriquePatient(HistoriquePatient instance);
    partial void UpdateHistoriquePatient(HistoriquePatient instance);
    partial void DeleteHistoriquePatient(HistoriquePatient instance);
    partial void InsertMedecin(Medecin instance);
    partial void UpdateMedecin(Medecin instance);
    partial void DeleteMedecin(Medecin instance);
    #endregion
		
		public HillthDataClassDataContext() : 
				base(global::premierTest.Properties.Settings.Default.HillthConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public HillthDataClassDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public HillthDataClassDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public HillthDataClassDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public HillthDataClassDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Hopital> Hopital
		{
			get
			{
				return this.GetTable<Hopital>();
			}
		}
		
		public System.Data.Linq.Table<Specialisation> Specialisation
		{
			get
			{
				return this.GetTable<Specialisation>();
			}
		}
		
		public System.Data.Linq.Table<Mutuelle> Mutuelle
		{
			get
			{
				return this.GetTable<Mutuelle>();
			}
		}
		
		public System.Data.Linq.Table<Utilisateurs> Utilisateurs
		{
			get
			{
				return this.GetTable<Utilisateurs>();
			}
		}
		
		public System.Data.Linq.Table<Connexion> Connexion
		{
			get
			{
				return this.GetTable<Connexion>();
			}
		}
		
		public System.Data.Linq.Table<FichePatient> FichePatient
		{
			get
			{
				return this.GetTable<FichePatient>();
			}
		}
		
		public System.Data.Linq.Table<HistoriquePatient> HistoriquePatient
		{
			get
			{
				return this.GetTable<HistoriquePatient>();
			}
		}
		
		public System.Data.Linq.Table<Medecin> Medecin
		{
			get
			{
				return this.GetTable<Medecin>();
			}
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.AuthentificationUser")]
		public ISingleResult<AuthentificationUserResult> AuthentificationUser([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(50)")] string username, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(50)")] string mdp)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), username, mdp);
			return ((ISingleResult<AuthentificationUserResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.InsertUtilisateur")]
		public int InsertUtilisateur([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(50)")] string id, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(50)")] string mdp)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, mdp);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.InsertPatient")]
		public int InsertPatient([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(50)")] string nom, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(50)")] string prenom, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(15)")] string numTel, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NChar(10)")] string sexe, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Adresse", DbType="NVarChar(MAX)")] string adresse, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="DateNaissance", DbType="Date")] System.Nullable<System.DateTime> dateNaissance, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="NIS", DbType="NVarChar(12)")] string nIS, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Allergies", DbType="NVarChar(MAX)")] string allergies, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="TiersPayant", DbType="NChar(10)")] string tiersPayant, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="IDMutuelle", DbType="Int")] System.Nullable<int> iDMutuelle, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="IDHopital", DbType="Int")] System.Nullable<int> iDHopital)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), nom, prenom, numTel, sexe, adresse, dateNaissance, nIS, allergies, tiersPayant, iDMutuelle, iDHopital);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.InsertHistorique")]
		public int InsertHistorique([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(12)")] string idMed, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="DateInscription", DbType="Date")] System.Nullable<System.DateTime> dateInscription, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="NIS", DbType="NVarChar(12)")] string nIS)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), idMed, dateInscription, nIS);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.AfficherLibelHop")]
		public ISingleResult<AfficherLibelHopResult> AfficherLibelHop()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<AfficherLibelHopResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ModifierPatient")]
		public ISingleResult<ModifierPatientResult> ModifierPatient([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(50)")] string nom, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(50)")] string prenom, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NChar(10)")] string sexe, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="TiersPayant", DbType="NChar(10)")] string tiersPayant, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="NIS", DbType="NVarChar(12)")] string nIS)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), nom, prenom, sexe, tiersPayant, nIS);
			return ((ISingleResult<ModifierPatientResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.DeletePatient")]
		public int DeletePatient([global::System.Data.Linq.Mapping.ParameterAttribute(Name="IDUtilisateur", DbType="NVarChar(12)")] string iDUtilisateur)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), iDUtilisateur);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.InsertMedecin")]
		public int InsertMedecin([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(50)")] string nom, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(50)")] string prenom, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(12)")] string numTel, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NChar(10)")] string sexe, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Adresse", DbType="NVarChar(50)")] string adresse, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="DateNaissance", DbType="Date")] System.Nullable<System.DateTime> dateNaissance, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="IDMedecin", DbType="NVarChar(12)")] string iDMedecin, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NChar(10)")] string convention, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> idspec)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), nom, prenom, numTel, sexe, adresse, dateNaissance, iDMedecin, convention, idspec);
			return ((int)(result.ReturnValue));
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Hopital")]
	public partial class Hopital : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDHopital;
		
		private string _LibelHopital;
		
		private EntitySet<FichePatient> _FichePatient;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDHopitalChanging(int value);
    partial void OnIDHopitalChanged();
    partial void OnLibelHopitalChanging(string value);
    partial void OnLibelHopitalChanged();
    #endregion
		
		public Hopital()
		{
			this._FichePatient = new EntitySet<FichePatient>(new Action<FichePatient>(this.attach_FichePatient), new Action<FichePatient>(this.detach_FichePatient));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDHopital", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IDHopital
		{
			get
			{
				return this._IDHopital;
			}
			set
			{
				if ((this._IDHopital != value))
				{
					this.OnIDHopitalChanging(value);
					this.SendPropertyChanging();
					this._IDHopital = value;
					this.SendPropertyChanged("IDHopital");
					this.OnIDHopitalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LibelHopital", DbType="NVarChar(50)")]
		public string LibelHopital
		{
			get
			{
				return this._LibelHopital;
			}
			set
			{
				if ((this._LibelHopital != value))
				{
					this.OnLibelHopitalChanging(value);
					this.SendPropertyChanging();
					this._LibelHopital = value;
					this.SendPropertyChanged("LibelHopital");
					this.OnLibelHopitalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Hopital_FichePatient", Storage="_FichePatient", ThisKey="IDHopital", OtherKey="IDHopital")]
		public EntitySet<FichePatient> FichePatient
		{
			get
			{
				return this._FichePatient;
			}
			set
			{
				this._FichePatient.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FichePatient(FichePatient entity)
		{
			this.SendPropertyChanging();
			entity.Hopital = this;
		}
		
		private void detach_FichePatient(FichePatient entity)
		{
			this.SendPropertyChanging();
			entity.Hopital = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Specialisation")]
	public partial class Specialisation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDSpec;
		
		private System.Nullable<double> _Honoraire;
		
		private string _LibelSpec;
		
		private EntitySet<Medecin> _Medecin;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDSpecChanging(int value);
    partial void OnIDSpecChanged();
    partial void OnHonoraireChanging(System.Nullable<double> value);
    partial void OnHonoraireChanged();
    partial void OnLibelSpecChanging(string value);
    partial void OnLibelSpecChanged();
    #endregion
		
		public Specialisation()
		{
			this._Medecin = new EntitySet<Medecin>(new Action<Medecin>(this.attach_Medecin), new Action<Medecin>(this.detach_Medecin));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDSpec", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IDSpec
		{
			get
			{
				return this._IDSpec;
			}
			set
			{
				if ((this._IDSpec != value))
				{
					this.OnIDSpecChanging(value);
					this.SendPropertyChanging();
					this._IDSpec = value;
					this.SendPropertyChanged("IDSpec");
					this.OnIDSpecChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Honoraire", DbType="Float")]
		public System.Nullable<double> Honoraire
		{
			get
			{
				return this._Honoraire;
			}
			set
			{
				if ((this._Honoraire != value))
				{
					this.OnHonoraireChanging(value);
					this.SendPropertyChanging();
					this._Honoraire = value;
					this.SendPropertyChanged("Honoraire");
					this.OnHonoraireChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LibelSpec", DbType="NVarChar(50)")]
		public string LibelSpec
		{
			get
			{
				return this._LibelSpec;
			}
			set
			{
				if ((this._LibelSpec != value))
				{
					this.OnLibelSpecChanging(value);
					this.SendPropertyChanging();
					this._LibelSpec = value;
					this.SendPropertyChanged("LibelSpec");
					this.OnLibelSpecChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Specialisation_Medecin", Storage="_Medecin", ThisKey="IDSpec", OtherKey="IDSpec")]
		public EntitySet<Medecin> Medecin
		{
			get
			{
				return this._Medecin;
			}
			set
			{
				this._Medecin.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Medecin(Medecin entity)
		{
			this.SendPropertyChanging();
			entity.Specialisation = this;
		}
		
		private void detach_Medecin(Medecin entity)
		{
			this.SendPropertyChanging();
			entity.Specialisation = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Mutuelle")]
	public partial class Mutuelle : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDMutuelle;
		
		private string _LibelMutuelle;
		
		private EntitySet<FichePatient> _FichePatient;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDMutuelleChanging(int value);
    partial void OnIDMutuelleChanged();
    partial void OnLibelMutuelleChanging(string value);
    partial void OnLibelMutuelleChanged();
    #endregion
		
		public Mutuelle()
		{
			this._FichePatient = new EntitySet<FichePatient>(new Action<FichePatient>(this.attach_FichePatient), new Action<FichePatient>(this.detach_FichePatient));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDMutuelle", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IDMutuelle
		{
			get
			{
				return this._IDMutuelle;
			}
			set
			{
				if ((this._IDMutuelle != value))
				{
					this.OnIDMutuelleChanging(value);
					this.SendPropertyChanging();
					this._IDMutuelle = value;
					this.SendPropertyChanged("IDMutuelle");
					this.OnIDMutuelleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LibelMutuelle", DbType="NVarChar(50)")]
		public string LibelMutuelle
		{
			get
			{
				return this._LibelMutuelle;
			}
			set
			{
				if ((this._LibelMutuelle != value))
				{
					this.OnLibelMutuelleChanging(value);
					this.SendPropertyChanging();
					this._LibelMutuelle = value;
					this.SendPropertyChanged("LibelMutuelle");
					this.OnLibelMutuelleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Mutuelle_FichePatient", Storage="_FichePatient", ThisKey="IDMutuelle", OtherKey="IDMutuelle")]
		public EntitySet<FichePatient> FichePatient
		{
			get
			{
				return this._FichePatient;
			}
			set
			{
				this._FichePatient.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FichePatient(FichePatient entity)
		{
			this.SendPropertyChanging();
			entity.Mutuelle = this;
		}
		
		private void detach_FichePatient(FichePatient entity)
		{
			this.SendPropertyChanging();
			entity.Mutuelle = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Utilisateurs")]
	public partial class Utilisateurs : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _IDUtilisateur;
		
		private string _Mdp;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDUtilisateurChanging(string value);
    partial void OnIDUtilisateurChanged();
    partial void OnMdpChanging(string value);
    partial void OnMdpChanged();
    #endregion
		
		public Utilisateurs()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDUtilisateur", DbType="NVarChar(12) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string IDUtilisateur
		{
			get
			{
				return this._IDUtilisateur;
			}
			set
			{
				if ((this._IDUtilisateur != value))
				{
					this.OnIDUtilisateurChanging(value);
					this.SendPropertyChanging();
					this._IDUtilisateur = value;
					this.SendPropertyChanged("IDUtilisateur");
					this.OnIDUtilisateurChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Mdp", DbType="NVarChar(50)")]
		public string Mdp
		{
			get
			{
				return this._Mdp;
			}
			set
			{
				if ((this._Mdp != value))
				{
					this.OnMdpChanging(value);
					this.SendPropertyChanging();
					this._Mdp = value;
					this.SendPropertyChanged("Mdp");
					this.OnMdpChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Connexion")]
	public partial class Connexion
	{
		
		private string _IDMedecin;
		
		private string _IDUtilisateur;
		
		public Connexion()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDMedecin", DbType="NVarChar(12)")]
		public string IDMedecin
		{
			get
			{
				return this._IDMedecin;
			}
			set
			{
				if ((this._IDMedecin != value))
				{
					this._IDMedecin = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDUtilisateur", DbType="NVarChar(12)")]
		public string IDUtilisateur
		{
			get
			{
				return this._IDUtilisateur;
			}
			set
			{
				if ((this._IDUtilisateur != value))
				{
					this._IDUtilisateur = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FichePatient")]
	public partial class FichePatient : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _NIS;
		
		private string _Nom;
		
		private string _Prenom;
		
		private System.Nullable<System.DateTime> _DateNaissance;
		
		private string _TiersPayant;
		
		private string _Adresse;
		
		private string _numTel;
		
		private System.Nullable<int> _IDHopital;
		
		private System.Nullable<int> _IDMutuelle;
		
		private string _Allergies;
		
		private string _Sexe;
		
		private EntitySet<HistoriquePatient> _HistoriquePatient;
		
		private EntityRef<Hopital> _Hopital;
		
		private EntityRef<Mutuelle> _Mutuelle;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNISChanging(string value);
    partial void OnNISChanged();
    partial void OnNomChanging(string value);
    partial void OnNomChanged();
    partial void OnPrenomChanging(string value);
    partial void OnPrenomChanged();
    partial void OnDateNaissanceChanging(System.Nullable<System.DateTime> value);
    partial void OnDateNaissanceChanged();
    partial void OnTiersPayantChanging(string value);
    partial void OnTiersPayantChanged();
    partial void OnAdresseChanging(string value);
    partial void OnAdresseChanged();
    partial void OnnumTelChanging(string value);
    partial void OnnumTelChanged();
    partial void OnIDHopitalChanging(System.Nullable<int> value);
    partial void OnIDHopitalChanged();
    partial void OnIDMutuelleChanging(System.Nullable<int> value);
    partial void OnIDMutuelleChanged();
    partial void OnAllergiesChanging(string value);
    partial void OnAllergiesChanged();
    partial void OnSexeChanging(string value);
    partial void OnSexeChanged();
    #endregion
		
		public FichePatient()
		{
			this._HistoriquePatient = new EntitySet<HistoriquePatient>(new Action<HistoriquePatient>(this.attach_HistoriquePatient), new Action<HistoriquePatient>(this.detach_HistoriquePatient));
			this._Hopital = default(EntityRef<Hopital>);
			this._Mutuelle = default(EntityRef<Mutuelle>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NIS", DbType="NVarChar(12) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string NIS
		{
			get
			{
				return this._NIS;
			}
			set
			{
				if ((this._NIS != value))
				{
					this.OnNISChanging(value);
					this.SendPropertyChanging();
					this._NIS = value;
					this.SendPropertyChanged("NIS");
					this.OnNISChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nom", DbType="NVarChar(50)")]
		public string Nom
		{
			get
			{
				return this._Nom;
			}
			set
			{
				if ((this._Nom != value))
				{
					this.OnNomChanging(value);
					this.SendPropertyChanging();
					this._Nom = value;
					this.SendPropertyChanged("Nom");
					this.OnNomChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Prenom", DbType="NVarChar(50)")]
		public string Prenom
		{
			get
			{
				return this._Prenom;
			}
			set
			{
				if ((this._Prenom != value))
				{
					this.OnPrenomChanging(value);
					this.SendPropertyChanging();
					this._Prenom = value;
					this.SendPropertyChanged("Prenom");
					this.OnPrenomChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateNaissance", DbType="Date")]
		public System.Nullable<System.DateTime> DateNaissance
		{
			get
			{
				return this._DateNaissance;
			}
			set
			{
				if ((this._DateNaissance != value))
				{
					this.OnDateNaissanceChanging(value);
					this.SendPropertyChanging();
					this._DateNaissance = value;
					this.SendPropertyChanged("DateNaissance");
					this.OnDateNaissanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TiersPayant", DbType="NChar(10)")]
		public string TiersPayant
		{
			get
			{
				return this._TiersPayant;
			}
			set
			{
				if ((this._TiersPayant != value))
				{
					this.OnTiersPayantChanging(value);
					this.SendPropertyChanging();
					this._TiersPayant = value;
					this.SendPropertyChanged("TiersPayant");
					this.OnTiersPayantChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Adresse", DbType="NVarChar(MAX)")]
		public string Adresse
		{
			get
			{
				return this._Adresse;
			}
			set
			{
				if ((this._Adresse != value))
				{
					this.OnAdresseChanging(value);
					this.SendPropertyChanging();
					this._Adresse = value;
					this.SendPropertyChanged("Adresse");
					this.OnAdresseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_numTel", DbType="NVarChar(15)")]
		public string numTel
		{
			get
			{
				return this._numTel;
			}
			set
			{
				if ((this._numTel != value))
				{
					this.OnnumTelChanging(value);
					this.SendPropertyChanging();
					this._numTel = value;
					this.SendPropertyChanged("numTel");
					this.OnnumTelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDHopital", DbType="Int")]
		public System.Nullable<int> IDHopital
		{
			get
			{
				return this._IDHopital;
			}
			set
			{
				if ((this._IDHopital != value))
				{
					if (this._Hopital.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDHopitalChanging(value);
					this.SendPropertyChanging();
					this._IDHopital = value;
					this.SendPropertyChanged("IDHopital");
					this.OnIDHopitalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDMutuelle", DbType="Int")]
		public System.Nullable<int> IDMutuelle
		{
			get
			{
				return this._IDMutuelle;
			}
			set
			{
				if ((this._IDMutuelle != value))
				{
					if (this._Mutuelle.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDMutuelleChanging(value);
					this.SendPropertyChanging();
					this._IDMutuelle = value;
					this.SendPropertyChanged("IDMutuelle");
					this.OnIDMutuelleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Allergies", DbType="NVarChar(MAX)")]
		public string Allergies
		{
			get
			{
				return this._Allergies;
			}
			set
			{
				if ((this._Allergies != value))
				{
					this.OnAllergiesChanging(value);
					this.SendPropertyChanging();
					this._Allergies = value;
					this.SendPropertyChanged("Allergies");
					this.OnAllergiesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sexe", DbType="NChar(10)")]
		public string Sexe
		{
			get
			{
				return this._Sexe;
			}
			set
			{
				if ((this._Sexe != value))
				{
					this.OnSexeChanging(value);
					this.SendPropertyChanging();
					this._Sexe = value;
					this.SendPropertyChanged("Sexe");
					this.OnSexeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FichePatient_HistoriquePatient", Storage="_HistoriquePatient", ThisKey="NIS", OtherKey="NIS")]
		public EntitySet<HistoriquePatient> HistoriquePatient
		{
			get
			{
				return this._HistoriquePatient;
			}
			set
			{
				this._HistoriquePatient.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Hopital_FichePatient", Storage="_Hopital", ThisKey="IDHopital", OtherKey="IDHopital", IsForeignKey=true, DeleteRule="CASCADE")]
		public Hopital Hopital
		{
			get
			{
				return this._Hopital.Entity;
			}
			set
			{
				Hopital previousValue = this._Hopital.Entity;
				if (((previousValue != value) 
							|| (this._Hopital.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Hopital.Entity = null;
						previousValue.FichePatient.Remove(this);
					}
					this._Hopital.Entity = value;
					if ((value != null))
					{
						value.FichePatient.Add(this);
						this._IDHopital = value.IDHopital;
					}
					else
					{
						this._IDHopital = default(Nullable<int>);
					}
					this.SendPropertyChanged("Hopital");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Mutuelle_FichePatient", Storage="_Mutuelle", ThisKey="IDMutuelle", OtherKey="IDMutuelle", IsForeignKey=true)]
		public Mutuelle Mutuelle
		{
			get
			{
				return this._Mutuelle.Entity;
			}
			set
			{
				Mutuelle previousValue = this._Mutuelle.Entity;
				if (((previousValue != value) 
							|| (this._Mutuelle.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Mutuelle.Entity = null;
						previousValue.FichePatient.Remove(this);
					}
					this._Mutuelle.Entity = value;
					if ((value != null))
					{
						value.FichePatient.Add(this);
						this._IDMutuelle = value.IDMutuelle;
					}
					else
					{
						this._IDMutuelle = default(Nullable<int>);
					}
					this.SendPropertyChanged("Mutuelle");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_HistoriquePatient(HistoriquePatient entity)
		{
			this.SendPropertyChanging();
			entity.FichePatient = this;
		}
		
		private void detach_HistoriquePatient(HistoriquePatient entity)
		{
			this.SendPropertyChanging();
			entity.FichePatient = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.HistoriquePatient")]
	public partial class HistoriquePatient : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _NIS;
		
		private string _IDMedecin;
		
		private System.Nullable<System.DateTime> _DateDerniereAuscultation;
		
		private EntityRef<FichePatient> _FichePatient;
		
		private EntityRef<Medecin> _Medecin;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNISChanging(string value);
    partial void OnNISChanged();
    partial void OnIDMedecinChanging(string value);
    partial void OnIDMedecinChanged();
    partial void OnDateDerniereAuscultationChanging(System.Nullable<System.DateTime> value);
    partial void OnDateDerniereAuscultationChanged();
    #endregion
		
		public HistoriquePatient()
		{
			this._FichePatient = default(EntityRef<FichePatient>);
			this._Medecin = default(EntityRef<Medecin>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NIS", DbType="NVarChar(12) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string NIS
		{
			get
			{
				return this._NIS;
			}
			set
			{
				if ((this._NIS != value))
				{
					if (this._FichePatient.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNISChanging(value);
					this.SendPropertyChanging();
					this._NIS = value;
					this.SendPropertyChanged("NIS");
					this.OnNISChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDMedecin", DbType="NVarChar(12) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string IDMedecin
		{
			get
			{
				return this._IDMedecin;
			}
			set
			{
				if ((this._IDMedecin != value))
				{
					if (this._Medecin.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDMedecinChanging(value);
					this.SendPropertyChanging();
					this._IDMedecin = value;
					this.SendPropertyChanged("IDMedecin");
					this.OnIDMedecinChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateDerniereAuscultation", DbType="Date")]
		public System.Nullable<System.DateTime> DateDerniereAuscultation
		{
			get
			{
				return this._DateDerniereAuscultation;
			}
			set
			{
				if ((this._DateDerniereAuscultation != value))
				{
					this.OnDateDerniereAuscultationChanging(value);
					this.SendPropertyChanging();
					this._DateDerniereAuscultation = value;
					this.SendPropertyChanged("DateDerniereAuscultation");
					this.OnDateDerniereAuscultationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FichePatient_HistoriquePatient", Storage="_FichePatient", ThisKey="NIS", OtherKey="NIS", IsForeignKey=true)]
		public FichePatient FichePatient
		{
			get
			{
				return this._FichePatient.Entity;
			}
			set
			{
				FichePatient previousValue = this._FichePatient.Entity;
				if (((previousValue != value) 
							|| (this._FichePatient.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FichePatient.Entity = null;
						previousValue.HistoriquePatient.Remove(this);
					}
					this._FichePatient.Entity = value;
					if ((value != null))
					{
						value.HistoriquePatient.Add(this);
						this._NIS = value.NIS;
					}
					else
					{
						this._NIS = default(string);
					}
					this.SendPropertyChanged("FichePatient");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Medecin_HistoriquePatient", Storage="_Medecin", ThisKey="IDMedecin", OtherKey="IDMedecin", IsForeignKey=true)]
		public Medecin Medecin
		{
			get
			{
				return this._Medecin.Entity;
			}
			set
			{
				Medecin previousValue = this._Medecin.Entity;
				if (((previousValue != value) 
							|| (this._Medecin.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Medecin.Entity = null;
						previousValue.HistoriquePatient.Remove(this);
					}
					this._Medecin.Entity = value;
					if ((value != null))
					{
						value.HistoriquePatient.Add(this);
						this._IDMedecin = value.IDMedecin;
					}
					else
					{
						this._IDMedecin = default(string);
					}
					this.SendPropertyChanged("Medecin");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Medecin")]
	public partial class Medecin : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _IDMedecin;
		
		private string _Nom;
		
		private string _Prenom;
		
		private string _Sexe;
		
		private string _LieuTravail;
		
		private string _Convention;
		
		private System.Nullable<System.DateTime> _DateNaissance;
		
		private System.Nullable<int> _IDSpec;
		
		private string _NumTel;
		
		private EntitySet<HistoriquePatient> _HistoriquePatient;
		
		private EntityRef<Specialisation> _Specialisation;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDMedecinChanging(string value);
    partial void OnIDMedecinChanged();
    partial void OnNomChanging(string value);
    partial void OnNomChanged();
    partial void OnPrenomChanging(string value);
    partial void OnPrenomChanged();
    partial void OnSexeChanging(string value);
    partial void OnSexeChanged();
    partial void OnLieuTravailChanging(string value);
    partial void OnLieuTravailChanged();
    partial void OnConventionChanging(string value);
    partial void OnConventionChanged();
    partial void OnDateNaissanceChanging(System.Nullable<System.DateTime> value);
    partial void OnDateNaissanceChanged();
    partial void OnIDSpecChanging(System.Nullable<int> value);
    partial void OnIDSpecChanged();
    partial void OnNumTelChanging(string value);
    partial void OnNumTelChanged();
    #endregion
		
		public Medecin()
		{
			this._HistoriquePatient = new EntitySet<HistoriquePatient>(new Action<HistoriquePatient>(this.attach_HistoriquePatient), new Action<HistoriquePatient>(this.detach_HistoriquePatient));
			this._Specialisation = default(EntityRef<Specialisation>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDMedecin", DbType="NVarChar(12) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string IDMedecin
		{
			get
			{
				return this._IDMedecin;
			}
			set
			{
				if ((this._IDMedecin != value))
				{
					this.OnIDMedecinChanging(value);
					this.SendPropertyChanging();
					this._IDMedecin = value;
					this.SendPropertyChanged("IDMedecin");
					this.OnIDMedecinChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nom", DbType="NVarChar(50)")]
		public string Nom
		{
			get
			{
				return this._Nom;
			}
			set
			{
				if ((this._Nom != value))
				{
					this.OnNomChanging(value);
					this.SendPropertyChanging();
					this._Nom = value;
					this.SendPropertyChanged("Nom");
					this.OnNomChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Prenom", DbType="NVarChar(50)")]
		public string Prenom
		{
			get
			{
				return this._Prenom;
			}
			set
			{
				if ((this._Prenom != value))
				{
					this.OnPrenomChanging(value);
					this.SendPropertyChanging();
					this._Prenom = value;
					this.SendPropertyChanged("Prenom");
					this.OnPrenomChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sexe", DbType="NChar(10)")]
		public string Sexe
		{
			get
			{
				return this._Sexe;
			}
			set
			{
				if ((this._Sexe != value))
				{
					this.OnSexeChanging(value);
					this.SendPropertyChanging();
					this._Sexe = value;
					this.SendPropertyChanged("Sexe");
					this.OnSexeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LieuTravail", DbType="NVarChar(50)")]
		public string LieuTravail
		{
			get
			{
				return this._LieuTravail;
			}
			set
			{
				if ((this._LieuTravail != value))
				{
					this.OnLieuTravailChanging(value);
					this.SendPropertyChanging();
					this._LieuTravail = value;
					this.SendPropertyChanged("LieuTravail");
					this.OnLieuTravailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Convention", DbType="NChar(10)")]
		public string Convention
		{
			get
			{
				return this._Convention;
			}
			set
			{
				if ((this._Convention != value))
				{
					this.OnConventionChanging(value);
					this.SendPropertyChanging();
					this._Convention = value;
					this.SendPropertyChanged("Convention");
					this.OnConventionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateNaissance", DbType="Date")]
		public System.Nullable<System.DateTime> DateNaissance
		{
			get
			{
				return this._DateNaissance;
			}
			set
			{
				if ((this._DateNaissance != value))
				{
					this.OnDateNaissanceChanging(value);
					this.SendPropertyChanging();
					this._DateNaissance = value;
					this.SendPropertyChanged("DateNaissance");
					this.OnDateNaissanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDSpec", DbType="Int")]
		public System.Nullable<int> IDSpec
		{
			get
			{
				return this._IDSpec;
			}
			set
			{
				if ((this._IDSpec != value))
				{
					if (this._Specialisation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDSpecChanging(value);
					this.SendPropertyChanging();
					this._IDSpec = value;
					this.SendPropertyChanged("IDSpec");
					this.OnIDSpecChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumTel", DbType="NVarChar(12)")]
		public string NumTel
		{
			get
			{
				return this._NumTel;
			}
			set
			{
				if ((this._NumTel != value))
				{
					this.OnNumTelChanging(value);
					this.SendPropertyChanging();
					this._NumTel = value;
					this.SendPropertyChanged("NumTel");
					this.OnNumTelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Medecin_HistoriquePatient", Storage="_HistoriquePatient", ThisKey="IDMedecin", OtherKey="IDMedecin")]
		public EntitySet<HistoriquePatient> HistoriquePatient
		{
			get
			{
				return this._HistoriquePatient;
			}
			set
			{
				this._HistoriquePatient.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Specialisation_Medecin", Storage="_Specialisation", ThisKey="IDSpec", OtherKey="IDSpec", IsForeignKey=true, DeleteRule="CASCADE")]
		public Specialisation Specialisation
		{
			get
			{
				return this._Specialisation.Entity;
			}
			set
			{
				Specialisation previousValue = this._Specialisation.Entity;
				if (((previousValue != value) 
							|| (this._Specialisation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Specialisation.Entity = null;
						previousValue.Medecin.Remove(this);
					}
					this._Specialisation.Entity = value;
					if ((value != null))
					{
						value.Medecin.Add(this);
						this._IDSpec = value.IDSpec;
					}
					else
					{
						this._IDSpec = default(Nullable<int>);
					}
					this.SendPropertyChanged("Specialisation");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_HistoriquePatient(HistoriquePatient entity)
		{
			this.SendPropertyChanging();
			entity.Medecin = this;
		}
		
		private void detach_HistoriquePatient(HistoriquePatient entity)
		{
			this.SendPropertyChanging();
			entity.Medecin = null;
		}
	}
	
	public partial class AuthentificationUserResult
	{
		
		private string _IDUtilisateur;
		
		private string _Mdp;
		
		public AuthentificationUserResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDUtilisateur", DbType="NVarChar(12) NOT NULL", CanBeNull=false)]
		public string IDUtilisateur
		{
			get
			{
				return this._IDUtilisateur;
			}
			set
			{
				if ((this._IDUtilisateur != value))
				{
					this._IDUtilisateur = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Mdp", DbType="NVarChar(50)")]
		public string Mdp
		{
			get
			{
				return this._Mdp;
			}
			set
			{
				if ((this._Mdp != value))
				{
					this._Mdp = value;
				}
			}
		}
	}
	
	public partial class AfficherLibelHopResult
	{
		
		private string _LibelHopital;
		
		public AfficherLibelHopResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LibelHopital", DbType="NVarChar(50)")]
		public string LibelHopital
		{
			get
			{
				return this._LibelHopital;
			}
			set
			{
				if ((this._LibelHopital != value))
				{
					this._LibelHopital = value;
				}
			}
		}
	}
	
	public partial class ModifierPatientResult
	{
		
		private string _NIS;
		
		private string _Nom;
		
		private string _Prenom;
		
		private System.Nullable<System.DateTime> _DateNaissance;
		
		private string _TiersPayant;
		
		private string _Adresse;
		
		private string _numTel;
		
		private System.Nullable<int> _IDHopital;
		
		private System.Nullable<int> _IDMutuelle;
		
		private string _Allergies;
		
		private string _Sexe;
		
		private int _IDHopital1;
		
		private string _LibelHopital;
		
		public ModifierPatientResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NIS", DbType="NVarChar(12) NOT NULL", CanBeNull=false)]
		public string NIS
		{
			get
			{
				return this._NIS;
			}
			set
			{
				if ((this._NIS != value))
				{
					this._NIS = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nom", DbType="NVarChar(50)")]
		public string Nom
		{
			get
			{
				return this._Nom;
			}
			set
			{
				if ((this._Nom != value))
				{
					this._Nom = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Prenom", DbType="NVarChar(50)")]
		public string Prenom
		{
			get
			{
				return this._Prenom;
			}
			set
			{
				if ((this._Prenom != value))
				{
					this._Prenom = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateNaissance", DbType="Date")]
		public System.Nullable<System.DateTime> DateNaissance
		{
			get
			{
				return this._DateNaissance;
			}
			set
			{
				if ((this._DateNaissance != value))
				{
					this._DateNaissance = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TiersPayant", DbType="NChar(10)")]
		public string TiersPayant
		{
			get
			{
				return this._TiersPayant;
			}
			set
			{
				if ((this._TiersPayant != value))
				{
					this._TiersPayant = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Adresse", DbType="NVarChar(MAX)")]
		public string Adresse
		{
			get
			{
				return this._Adresse;
			}
			set
			{
				if ((this._Adresse != value))
				{
					this._Adresse = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_numTel", DbType="NVarChar(15)")]
		public string numTel
		{
			get
			{
				return this._numTel;
			}
			set
			{
				if ((this._numTel != value))
				{
					this._numTel = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDHopital", DbType="Int")]
		public System.Nullable<int> IDHopital
		{
			get
			{
				return this._IDHopital;
			}
			set
			{
				if ((this._IDHopital != value))
				{
					this._IDHopital = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDMutuelle", DbType="Int")]
		public System.Nullable<int> IDMutuelle
		{
			get
			{
				return this._IDMutuelle;
			}
			set
			{
				if ((this._IDMutuelle != value))
				{
					this._IDMutuelle = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Allergies", DbType="NVarChar(MAX)")]
		public string Allergies
		{
			get
			{
				return this._Allergies;
			}
			set
			{
				if ((this._Allergies != value))
				{
					this._Allergies = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sexe", DbType="NChar(10)")]
		public string Sexe
		{
			get
			{
				return this._Sexe;
			}
			set
			{
				if ((this._Sexe != value))
				{
					this._Sexe = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDHopital1", DbType="Int NOT NULL")]
		public int IDHopital1
		{
			get
			{
				return this._IDHopital1;
			}
			set
			{
				if ((this._IDHopital1 != value))
				{
					this._IDHopital1 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LibelHopital", DbType="NVarChar(50)")]
		public string LibelHopital
		{
			get
			{
				return this._LibelHopital;
			}
			set
			{
				if ((this._LibelHopital != value))
				{
					this._LibelHopital = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
